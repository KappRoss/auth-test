{"version":3,"sources":["components/authPage/authPage.module.css","store/actions/actionsType.js","UserStateFile/users.js","components/authPage/AuthPage.js","store/actions/auth.js","components/infoPage/InfoPage.js","components/adminPage/AdminPage.js","App.js","reportWebVitals.js","store/reducer/authReducer.js","store/rootReducer.js","index.js"],"names":["module","exports","AUTH_LOG_IN","AUTH_SIGN_UP","ADMIN_AUTH","AUTH_ERROR","LOG_OUT","users","login","password","idToken","Math","random","connect","state","isAuth","auth","adminLogin","adminPassword","isAdmin","error","success","isLogin","dispatch","getState","filter","user","length","type","userName","userPass","logIn","signUp","logOut","useState","setLogin","setPassword","loginHandler","kayPressHandler","event","key","className","s","AuthPage","onClick","onSubmit","e","preventDefault","onKeyPress","htmlFor","id","value","onChange","target","style","color","InfoPage","props","AdminPage","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","token","rootReducer","combineReducers","actions","persistConfig","storage","whitelist","persistedReducer","persistReducer","store","createStore","compose","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,SAAW,6B,oLCDhBC,EAAc,cACdC,EAAe,eACfC,EAAa,aACbC,EAAa,aACbC,EAAU,UCJVC,EAAQ,CACjB,CACIC,MAAO,QACPC,SAAU,QACVC,QAASC,KAAKC,UAElB,CACIJ,MAAO,iBACPC,SAAU,OACVC,QAASC,KAAKC,W,OCwFPC,eAXS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,WACvBC,cAAeJ,EAAME,KAAKE,cAC1BC,QAASL,EAAME,KAAKG,QACpBC,MAAON,EAAME,KAAKI,MAClBC,QAASP,EAAME,KAAKK,WAIY,CAACL,KCrErB,SAACR,EAAOC,EAAUa,EAASH,GAC3C,OAAO,SAACI,EAAUC,GACd,IAAMV,EAAQU,KAGCjB,EAEKkB,QAAO,SAAAC,GAAI,OAAIA,EAAKlB,QAAUA,GAASkB,EAAKjB,WAAaA,KAGpEkB,OAOLR,GAAWG,GACXC,EA3BR,CACIK,KAAMxB,IA8BFkB,GAIkB,IADLR,EAAME,KAAKT,MAAMkB,QAAO,SAAAC,GAAI,OAAIA,EAAKG,WAAarB,GAASkB,EAAKI,WAAarB,KACnFkB,OAAeJ,EAnDpB,iBACV,CACIK,KAAM1B,EACNQ,QAHM,uDAAW,MAmDkBqB,IAAWR,EA9BjC,CAACK,KAAMvB,IAkCAS,EAAME,KAAKT,MAAMkB,QAAQ,SAAAC,GAAI,OAAIA,EAAKG,WAAarB,KAErDmB,OAAS,GACnBJ,EAnDD,SAACf,EAAOC,GAAR,MACX,CACImB,KAAMzB,EACNK,QACAC,YA+CiBuB,CAAOxB,EAAOC,MDoCQwB,OC9BzB,WAClB,OAAO,SAAAV,GACHA,EA3CiB,CAACK,KAAMtB,ODuEjBO,EA5FE,SAAC,GAAgF,IAA/EI,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,cAAeF,EAAmD,EAAnDA,KAAMD,EAA6C,EAA7CA,OAAQI,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAASY,EAAY,EAAZA,OAAY,EAEnEC,mBAAS,IAF0D,mBAEtF1B,EAFsF,KAE/E2B,EAF+E,OAG7DD,mBAAS,IAHoD,mBAGtFzB,EAHsF,KAG5E2B,EAH4E,KAKvFC,EAAe,WAEbrB,EAAKR,EAAOC,GAAU,EADtBD,IAAUS,GAAcR,IAAaS,IAevCoB,EAAkB,SAACC,GACJ,UAAdA,EAAMC,KACLH,KAKR,OACI,qBAAKI,UAAWC,IAAEC,SAAlB,SAEQ5B,EACM,qDAEEI,EACM,2CACA,0CAEN,wBAAQyB,QAASX,EAAjB,wBAEF,gCACE,2CACA,uBACIY,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBACnBC,WAAYV,EAFhB,UAII,gCACI,uBAAOW,QAAQ,QAAf,6BACA,uBACIrB,KAAK,OACLsB,GAAI,QACJC,MAAO3C,EACP4C,SAAU,SAAAN,GAAC,OAAIX,EAASW,EAAEO,OAAOF,QACjCH,WAAYV,OAGpB,gCACI,uBAAOW,QAAQ,WAAf,2BACA,uBACIrB,KAAK,WACLsB,GAAI,WACJC,MAAO1C,EACP2C,SAjDT,SAACb,GACpBA,EAAMQ,iBACNX,EAAYG,EAAMc,OAAOF,OACR,UAAdZ,EAAMC,KACLH,KA8CwBW,WAAYV,IAGZlB,EAAQ,sBAAMkC,MAAO,CAACC,MAAO,OAArB,iCAA0D,WAI9E,wBAAQX,QAASP,EAAjB,oBACA,wBAAQO,QAAS,kBAAM5B,EAAKR,EAAOC,GAAU,GAAO,IAApD,qBAEIY,EAAU,gEAA4C,aEpEnEmC,EARE,SAAAC,GACb,OACI,8BACI,6CCKGC,EARG,SAAAD,GACd,OACI,8BACI,8CCyCG5C,eAPS,SAAAC,GACpB,MAAO,CACHK,QAASL,EAAME,KAAKG,QACpBJ,OAAQD,EAAME,KAAKD,UAIZF,EAtCH,SAAC,GAAuB,IAAtBM,EAAqB,EAArBA,QAASJ,EAAY,EAAZA,OACnB,OACI,sBAAK0B,UAAU,MAAf,UAEQ1B,EACM,sBAAK0B,UAAU,UAAf,UACE,8BACI,cAAC,IAAD,CAASkB,GAAI,IAAb,qBAEJ,8BACI,cAAC,IAAD,CAASA,GAAI,aAAb,yBAEJ,8BACKxC,EACK,cAAC,IAAD,CAASwC,GAAI,cAAb,wBACA,UAIZ,KAGV,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,aAAcC,UAAWN,IAC5C,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAM,cAAeC,UAAWJ,IAC7C,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAM,IAAKC,UAAWnB,aCrBpCoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8BCLRQ,EAAe,CACjBzD,QAAQ,EACR0D,MAAO,KACPlE,MAAO,CACH,CACIsB,SAAU,YACVC,SAAU,QAEd,CACID,SAAU,eACVC,SAAU,SAIlBb,WAAY,QACZC,cAAe,QACfC,SAAS,EACTC,OAAO,EACPC,SAAS,G,qCCbPqD,EAAcC,YAAgB,CAChC3D,KDeW,WAAqD,IAAhCF,EAA+B,uDAAvB0D,EAAcI,EAAS,uCAC/D,OAAQA,EAAQhD,MACZ,KAAKxB,EACD,OAAO,2BACAU,GADP,IAEIK,SAAS,EACTJ,QAAQ,IAEhB,KAAKb,EACD,OAAO,2BACAY,GADP,IAEIC,QAAQ,EACRK,OAAO,EACPqD,MAAOG,EAAQlE,UAEvB,KAAKP,EACD,OAAO,2BACAW,GADP,IAEIP,MAAM,GAAD,mBAAMO,EAAMP,OAAZ,CAAmB,CACpBsB,SAAU+C,EAAQpE,MAClBsB,SAAU8C,EAAQnE,YAEtBY,SAAS,EACTD,OAAO,IAEf,KAAKf,EACD,OAAO,2BACAS,GADP,IAEIM,OAAO,IAEf,KAAKd,EACD,OAAO,2BACAQ,GADP,IAEIC,QAAQ,EACRM,SAAS,EACTF,SAAS,EACTC,OAAO,IAEf,QACI,OAAON,MCnDb+D,EAAgB,CAClBrC,IAAK,OACLsC,QAASA,IACTC,UAAW,CAAC,SAEVC,EAAmBC,YAAeJ,EAAeH,GAE5CQ,EAAQC,YAAYH,EAC3BI,YAAQC,YAAgBC,OAQjBC,EAAYC,YAAaN,GCjBpCO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACI,cAAC,IAAD,CAAaK,UAAWA,EAAWK,QAAS,KAA5C,SACI,cAAC,IAAD,UACI,cAAC,EAAD,YAKhBC,SAASC,eAAe,SAM5B/B,M","file":"static/js/main.ffc3cc20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthPage\":\"authPage_AuthPage__2WZrl\"};","export const AUTH_LOG_IN = 'AUTH_LOG_IN'\nexport const AUTH_SIGN_UP = 'AUTH_SIGN_UP'\nexport const ADMIN_AUTH = 'ADMIN_AUTH'\nexport const AUTH_ERROR = 'AUTH_ERROR'\nexport const LOG_OUT = 'LOG_OUT'","export const users = [\n    {\n        login: 'admin',\n        password: 'admin',\n        idToken: Math.random()\n    },\n    {\n        login: 'test@gmail.com',\n        password: '1234',\n        idToken: Math.random()\n    }\n]\n\n","import React, {useState} from 'react'\nimport s from './authPage.module.css'\nimport {connect} from \"react-redux\";\nimport {auth, logOut} from \"../../store/actions/auth\";\n\nconst AuthPage = ({adminLogin, adminPassword, auth, isAuth, isAdmin, error, success, logOut}) => {\n\n    const [login, setLogin] = useState('')\n    const [password, setPassword] = useState('')\n\n    const loginHandler = () => {\n        if (login === adminLogin && password === adminPassword) {\n            auth(login, password, true, true)\n        } else {\n            auth(login, password, true, false)\n        }\n    }\n\n    const handleKeyPress = (event) => {\n        event.preventDefault()\n        setPassword(event.target.value)\n        if(event.key === 'Enter'){\n            loginHandler()\n        }\n    }\n\n    const kayPressHandler = (event) => {\n        if(event.key === 'Enter'){\n            loginHandler()\n        }\n\n    }\n\n    return (\n        <div className={s.AuthPage}>\n            {\n                isAuth\n                    ? <div>\n                        You are log in as {\n                        isAdmin\n                            ? <span>'ADMIN'</span>\n                            : <span>'USER'</span>\n                    }\n                        <button onClick={logOut}>Log out</button>\n                    </div>\n                    : <div>\n                        <h1>Auth Page</h1>\n                        <form\n                            onSubmit={(e) => e.preventDefault()}\n                            onKeyPress={kayPressHandler}\n                        >\n                            <div>\n                                <label htmlFor=\"login\">Your Email/Nick</label>\n                                <input\n                                    type=\"text\"\n                                    id={'login'}\n                                    value={login}\n                                    onChange={e => setLogin(e.target.value) }\n                                    onKeyPress={kayPressHandler}\n                                />\n                            </div>\n                            <div>\n                                <label htmlFor=\"password\">Your password</label>\n                                <input\n                                    type=\"password\"\n                                    id={'password'}\n                                    value={password}\n                                    onChange={handleKeyPress}\n                                    onKeyPress={kayPressHandler}\n                                />\n                                {\n                                    error ? <span style={{color: 'red'}}>Wrong pass or login</span> : null\n                                }\n                            </div>\n                        </form>\n                        <button onClick={loginHandler}>Log in</button>\n                        <button onClick={() => auth(login, password, false, false)}>Sign up</button>\n                        {\n                            success ? <span>Sign up success! Now log in!</span> : null\n                        }\n                    </div>\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuth: state.auth.isAuth,\n        adminLogin: state.auth.adminLogin,\n        adminPassword: state.auth.adminPassword,\n        isAdmin: state.auth.isAdmin,\n        error: state.auth.error,\n        success: state.auth.success\n    }\n}\n\nexport default connect(mapStateToProps, {auth, logOut})(AuthPage)\n\n","import {ADMIN_AUTH, AUTH_ERROR, AUTH_LOG_IN, AUTH_SIGN_UP, LOG_OUT} from \"./actionsType\";\nimport {users} from \"../../UserStateFile/users\";\n\nconst logIn = (idToken = null) => (\n    {\n        type: AUTH_LOG_IN,\n        idToken\n    }\n)\n\nconst signUp = (login, password) => (\n    {\n        type: AUTH_SIGN_UP,\n        login,\n        password\n    }\n)\n\nconst adminAuth = () => (\n    {\n        type: ADMIN_AUTH\n    }\n)\n\nconst error = () => ({type: AUTH_ERROR})\n\nconst setLogOut = () => ({type: LOG_OUT})\n\nexport const auth = (login, password, isLogin, isAdmin) => {\n    return (dispatch, getState) => {\n        const state = getState()\n\n        /////// data from file ///////\n        let response = users\n\n        let user = response.filter(user => user.login === login && user.password === password)\n\n\n        if (user.length === 1) {\n            //dispatch( logIn(user.idToken))\n        }\n        ///////////////////////////////\n\n\n        //////////admin/////////////\n        if (isAdmin && isLogin) {\n            dispatch(adminAuth())\n        }\n\n        ///////log in//////////////\n        if (isLogin) {\n\n\n            let answer = state.auth.users.filter(user => user.userName === login && user.userPass === password)\n            answer.length === 1 ? dispatch(logIn()) : dispatch(error())\n\n        } else {\n            //////////sign in /////////\n            let notRepeat = state.auth.users.filter( user => user.userName === login )\n\n            if (notRepeat.length < 1 ) {\n                dispatch(signUp(login, password))\n            }\n        }\n    }\n}\n\nexport const logOut = () => {\n    return dispatch => {\n        dispatch(setLogOut())\n    }\n}","import React from 'react'\n\nconst InfoPage = props => {\n    return(\n        <div>\n            <h1>InfoPage</h1>\n        </div>\n    )\n}\n\nexport default InfoPage","import React from 'react'\n\nconst AdminPage = props => {\n    return(\n        <div>\n            <h1>AdminPage</h1>\n        </div>\n    )\n}\n\nexport default AdminPage","import './App.css';\nimport React from 'react'\nimport {NavLink, Route, Switch} from \"react-router-dom\";\nimport AuthPage from \"./components/authPage/AuthPage\";\nimport InfoPage from \"./components/infoPage/InfoPage\";\nimport AdminPage from \"./components/adminPage/AdminPage\";\nimport {connect} from \"react-redux\";\n\nconst App = ({isAdmin, isAuth}) => {\n    return (\n        <div className=\"App\">\n            {\n                isAuth\n                    ? <div className=\"navMenu\">\n                        <div>\n                            <NavLink to={'/'}>Auth </NavLink>\n                        </div>\n                        <div>\n                            <NavLink to={'/info-page'}>Info page</NavLink>\n                        </div>\n                        <div>\n                            {isAdmin\n                                ? <NavLink to={'/admin-page'}>Admin page</NavLink>\n                                : null\n                            }\n                        </div>\n                    </div>\n                    : null\n            }\n\n            <Switch>\n                <Route exact path={'/info-page'} component={InfoPage}/>\n                <Route exact path={'/admin-page'} component={AdminPage}/>\n                <Route exact path={'/'} component={AuthPage}/>\n            </Switch>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAdmin: state.auth.isAdmin,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ADMIN_AUTH, AUTH_ERROR, AUTH_LOG_IN, AUTH_SIGN_UP, LOG_OUT} from \"../actions/actionsType\";\n\nconst initialState = {\n    isAuth: false,      // for local\n    token: null,        // for simulate. (token from src/UserStateFile/users)\n    users: [\n        {\n            userName: 'k@mail.ru',\n            userPass: '1234'\n        },\n        {\n            userName: 'test@mail.ua',\n            userPass: '1234'\n        }\n    ],\n\n    adminLogin: 'admin',\n    adminPassword: 'admin',\n    isAdmin: false,\n    error: false,\n    success: false\n}\n\nexport default function authReducer(state = initialState, actions) {\n    switch (actions.type) {\n        case ADMIN_AUTH :\n            return {\n                ...state,\n                isAdmin: true,\n                isAuth: true\n            }\n        case AUTH_LOG_IN:\n            return {\n                ...state,\n                isAuth: true,\n                error: false,\n                token: actions.idToken\n            }\n        case AUTH_SIGN_UP:\n            return {\n                ...state,\n                users: [...state.users, {\n                    userName: actions.login,\n                    userPass: actions.password\n                }],\n                success: true,\n                error: false\n            }\n        case AUTH_ERROR:\n            return {\n                ...state,\n                error: true\n            }\n        case LOG_OUT:\n            return {\n                ...state,\n                isAuth: false,\n                success: false,\n                isAdmin: false,\n                error: false\n            }\n        default:\n            return state\n    }\n}\n\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\nimport authReducer from \"./reducer/authReducer\";\n//import {createLogger} from \"redux-logger/src\";\nimport thunk from \"redux-thunk\";\nimport storage from 'redux-persist/lib/storage'\nimport {persistReducer, persistStore} from \"redux-persist\";\n\nconst rootReducer = combineReducers({\n    auth: authReducer\n})\n\nconst persistConfig = {\n    key: 'root',\n    storage: storage,\n    whitelist: ['auth']\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport let store = createStore(persistedReducer,\n    compose(applyMiddleware(thunk)))\n\n// const logger = createLogger()\n//\n// export let store = createStore(persistedReducer,\n//     compose(applyMiddleware(logger, thunk),\n//         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\n\nexport let persistor = persistStore(store)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport {Provider} from \"react-redux\"\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {persistor, store} from \"./store/rootReducer\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate persistor={persistor} loading={null}>\n                <Router>\n                    <App/>\n                </Router>\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}